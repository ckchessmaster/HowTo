trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    include:
    - PythonFunctionApp/src/*

variables:
  subscription: ARM
  functionAppName: chrisDemoFunctionApp
  vmImageName: 'ubuntu-latest'
  workingDirectory: '$(System.DefaultWorkingDirectory)/PythonFunctionApp/src'

pool:
  vmImage: $(vmImageName)

stages:
- stage: Test
  displayName: Test
  jobs:
  - job: UnitTest
    displayName: UnitTest
    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python 3.8'
      inputs:
        versionSpec: 3.8

    - script: pip install -r requirements.txt
      displayName: 'Install Dependencies'
      workingDirectory: $(workingDirectory)

    - script: pytest $(workingDirectory)/tests --doctest-modules --junitxml=junit/test-results.xml
      displayName: Run Tests
      workingDirectory: $(workingDirectory)

    - task: PublishTestResults@2
      displayName: Publish Test Results
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '$(workingDirectory)/**/test-*.xml'
        testRunTitle: 'Publish test results for Python $(python.version)'

- stage: Build
  displayName: Build
  dependsOn: Test
  condition: succeeded('Test')
  jobs:
  - job: Build
    displayName: Build
    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python 3.8'
      inputs:
        versionSpec: 3.8

    - bash: |
        if [ -f extensions.csproj ]
        then
          dotnet build extensions.csproj -output
        fi
      workingDirectory: $(workingDirectory)
      displayName: Build Extensions

    - bash: |
        pip install --upgrade pip
        pip install --target=".python_packages/lib/site-packages" -r requirements.txt
      displayName: Install Dependencies
      workingDirectory: $(workingDirectory)

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(workingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(functionAppName)$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(functionAppName)$(Build.BuildId).zip
      displayName: 'Upload Package'
      artifact: func

- stage: Deploy
  displayName: Deploy
  dependsOn: Build
  condition: succeeded('Build')
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(subscription)'
              appType: functionAppLinux
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/func/$(functionAppName)$(Build.BuildId).zip'